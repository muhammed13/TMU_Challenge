
TMU_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000103c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000103c  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  0080006c  0080006c  000010dc  2**0
                  ALLOC
  3 .stab         00001980  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a20  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <main>
      8a:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
* Return value: u8_error- variable that describe the error status
* Description: This function can set the direction of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_init+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	9b 83       	std	Y+3, r25	; 0x03
      a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_error;
	if(DIO_info == NULL_Ptr)
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	9b 81       	ldd	r25, Y+3	; 0x03
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	19 f4       	brne	.+6      	; 0xb2 <DIO_init+0x20>
	{
		u8_error = E_NOk;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	89 83       	std	Y+1, r24	; 0x01
      b0:	9d c0       	rjmp	.+314    	; 0x1ec <DIO_init+0x15a>
	}
	else
	{
		switch(DIO_info->GPIO)
      b2:	ea 81       	ldd	r30, Y+2	; 0x02
      b4:	fb 81       	ldd	r31, Y+3	; 0x03
      b6:	80 81       	ld	r24, Z
      b8:	28 2f       	mov	r18, r24
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	3d 83       	std	Y+5, r19	; 0x05
      be:	2c 83       	std	Y+4, r18	; 0x04
      c0:	8c 81       	ldd	r24, Y+4	; 0x04
      c2:	9d 81       	ldd	r25, Y+5	; 0x05
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	91 05       	cpc	r25, r1
      c8:	a9 f1       	breq	.+106    	; 0x134 <DIO_init+0xa2>
      ca:	2c 81       	ldd	r18, Y+4	; 0x04
      cc:	3d 81       	ldd	r19, Y+5	; 0x05
      ce:	22 30       	cpi	r18, 0x02	; 2
      d0:	31 05       	cpc	r19, r1
      d2:	2c f4       	brge	.+10     	; 0xde <DIO_init+0x4c>
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	00 97       	sbiw	r24, 0x00	; 0
      da:	71 f0       	breq	.+28     	; 0xf8 <DIO_init+0x66>
      dc:	85 c0       	rjmp	.+266    	; 0x1e8 <DIO_init+0x156>
      de:	2c 81       	ldd	r18, Y+4	; 0x04
      e0:	3d 81       	ldd	r19, Y+5	; 0x05
      e2:	22 30       	cpi	r18, 0x02	; 2
      e4:	31 05       	cpc	r19, r1
      e6:	09 f4       	brne	.+2      	; 0xea <DIO_init+0x58>
      e8:	43 c0       	rjmp	.+134    	; 0x170 <DIO_init+0xde>
      ea:	8c 81       	ldd	r24, Y+4	; 0x04
      ec:	9d 81       	ldd	r25, Y+5	; 0x05
      ee:	83 30       	cpi	r24, 0x03	; 3
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_init+0x64>
      f4:	5b c0       	rjmp	.+182    	; 0x1ac <DIO_init+0x11a>
      f6:	78 c0       	rjmp	.+240    	; 0x1e8 <DIO_init+0x156>
		{
		case GPIOA:
			if(DIO_info->dir == INPUT)
      f8:	ea 81       	ldd	r30, Y+2	; 0x02
      fa:	fb 81       	ldd	r31, Y+3	; 0x03
      fc:	82 81       	ldd	r24, Z+2	; 0x02
      fe:	88 23       	and	r24, r24
     100:	69 f4       	brne	.+26     	; 0x11c <DIO_init+0x8a>
			{
				PORTA_DIR &= ~(DIO_info->pins);
     102:	aa e3       	ldi	r26, 0x3A	; 58
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	ea e3       	ldi	r30, 0x3A	; 58
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	98 2f       	mov	r25, r24
     10e:	ea 81       	ldd	r30, Y+2	; 0x02
     110:	fb 81       	ldd	r31, Y+3	; 0x03
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	80 95       	com	r24
     116:	89 23       	and	r24, r25
     118:	8c 93       	st	X, r24
     11a:	0a c0       	rjmp	.+20     	; 0x130 <DIO_init+0x9e>
			}
			else
			{
				PORTA_DIR |= DIO_info->pins;
     11c:	aa e3       	ldi	r26, 0x3A	; 58
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	ea e3       	ldi	r30, 0x3A	; 58
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	90 81       	ld	r25, Z
     126:	ea 81       	ldd	r30, Y+2	; 0x02
     128:	fb 81       	ldd	r31, Y+3	; 0x03
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     130:	19 82       	std	Y+1, r1	; 0x01
     132:	5c c0       	rjmp	.+184    	; 0x1ec <DIO_init+0x15a>
			break;

		case GPIOB:
			if(DIO_info->dir == INPUT)
     134:	ea 81       	ldd	r30, Y+2	; 0x02
     136:	fb 81       	ldd	r31, Y+3	; 0x03
     138:	82 81       	ldd	r24, Z+2	; 0x02
     13a:	88 23       	and	r24, r24
     13c:	69 f4       	brne	.+26     	; 0x158 <DIO_init+0xc6>
			{
				PORTB_DIR &= ~(DIO_info->pins);
     13e:	a7 e3       	ldi	r26, 0x37	; 55
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	e7 e3       	ldi	r30, 0x37	; 55
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	98 2f       	mov	r25, r24
     14a:	ea 81       	ldd	r30, Y+2	; 0x02
     14c:	fb 81       	ldd	r31, Y+3	; 0x03
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	80 95       	com	r24
     152:	89 23       	and	r24, r25
     154:	8c 93       	st	X, r24
     156:	0a c0       	rjmp	.+20     	; 0x16c <DIO_init+0xda>
			}
			else
			{
				PORTB_DIR |= DIO_info->pins;
     158:	a7 e3       	ldi	r26, 0x37	; 55
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e7 e3       	ldi	r30, 0x37	; 55
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	ea 81       	ldd	r30, Y+2	; 0x02
     164:	fb 81       	ldd	r31, Y+3	; 0x03
     166:	81 81       	ldd	r24, Z+1	; 0x01
     168:	89 2b       	or	r24, r25
     16a:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     16c:	19 82       	std	Y+1, r1	; 0x01
     16e:	3e c0       	rjmp	.+124    	; 0x1ec <DIO_init+0x15a>
			break;
		case GPIOC:
			if(DIO_info->dir == INPUT)
     170:	ea 81       	ldd	r30, Y+2	; 0x02
     172:	fb 81       	ldd	r31, Y+3	; 0x03
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	88 23       	and	r24, r24
     178:	69 f4       	brne	.+26     	; 0x194 <DIO_init+0x102>
			{
				PORTC_DIR &= ~(DIO_info->pins);
     17a:	a4 e3       	ldi	r26, 0x34	; 52
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	e4 e3       	ldi	r30, 0x34	; 52
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	98 2f       	mov	r25, r24
     186:	ea 81       	ldd	r30, Y+2	; 0x02
     188:	fb 81       	ldd	r31, Y+3	; 0x03
     18a:	81 81       	ldd	r24, Z+1	; 0x01
     18c:	80 95       	com	r24
     18e:	89 23       	and	r24, r25
     190:	8c 93       	st	X, r24
     192:	0a c0       	rjmp	.+20     	; 0x1a8 <DIO_init+0x116>
			}
			else
			{
				PORTC_DIR |= DIO_info->pins;
     194:	a4 e3       	ldi	r26, 0x34	; 52
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e4 e3       	ldi	r30, 0x34	; 52
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	90 81       	ld	r25, Z
     19e:	ea 81       	ldd	r30, Y+2	; 0x02
     1a0:	fb 81       	ldd	r31, Y+3	; 0x03
     1a2:	81 81       	ldd	r24, Z+1	; 0x01
     1a4:	89 2b       	or	r24, r25
     1a6:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     1a8:	19 82       	std	Y+1, r1	; 0x01
     1aa:	20 c0       	rjmp	.+64     	; 0x1ec <DIO_init+0x15a>
			break;

		case GPIOD:
			if(DIO_info->dir == INPUT)
     1ac:	ea 81       	ldd	r30, Y+2	; 0x02
     1ae:	fb 81       	ldd	r31, Y+3	; 0x03
     1b0:	82 81       	ldd	r24, Z+2	; 0x02
     1b2:	88 23       	and	r24, r24
     1b4:	69 f4       	brne	.+26     	; 0x1d0 <DIO_init+0x13e>
			{
				PORTD_DIR &= ~(DIO_info->pins);
     1b6:	a1 e3       	ldi	r26, 0x31	; 49
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e1 e3       	ldi	r30, 0x31	; 49
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	98 2f       	mov	r25, r24
     1c2:	ea 81       	ldd	r30, Y+2	; 0x02
     1c4:	fb 81       	ldd	r31, Y+3	; 0x03
     1c6:	81 81       	ldd	r24, Z+1	; 0x01
     1c8:	80 95       	com	r24
     1ca:	89 23       	and	r24, r25
     1cc:	8c 93       	st	X, r24
     1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <DIO_init+0x152>
			}
			else
			{
				PORTD_DIR |= DIO_info->pins;
     1d0:	a1 e3       	ldi	r26, 0x31	; 49
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e1 e3       	ldi	r30, 0x31	; 49
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	90 81       	ld	r25, Z
     1da:	ea 81       	ldd	r30, Y+2	; 0x02
     1dc:	fb 81       	ldd	r31, Y+3	; 0x03
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	89 2b       	or	r24, r25
     1e2:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     1e4:	19 82       	std	Y+1, r1	; 0x01
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_init+0x15a>
			break;

		default:
			u8_error = E_NOk;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8_error;
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <DIO_Write>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can set the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	00 d0       	rcall	.+0      	; 0x204 <DIO_Write+0x6>
     204:	00 d0       	rcall	.+0      	; 0x206 <DIO_Write+0x8>
     206:	00 d0       	rcall	.+0      	; 0x208 <DIO_Write+0xa>
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	8a 83       	std	Y+2, r24	; 0x02
     20e:	6b 83       	std	Y+3, r22	; 0x03
     210:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	28 2f       	mov	r18, r24
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	3e 83       	std	Y+6, r19	; 0x06
     21a:	2d 83       	std	Y+5, r18	; 0x05
     21c:	8d 81       	ldd	r24, Y+5	; 0x05
     21e:	9e 81       	ldd	r25, Y+6	; 0x06
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	91 05       	cpc	r25, r1
     224:	81 f1       	breq	.+96     	; 0x286 <DIO_Write+0x88>
     226:	2d 81       	ldd	r18, Y+5	; 0x05
     228:	3e 81       	ldd	r19, Y+6	; 0x06
     22a:	22 30       	cpi	r18, 0x02	; 2
     22c:	31 05       	cpc	r19, r1
     22e:	2c f4       	brge	.+10     	; 0x23a <DIO_Write+0x3c>
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	00 97       	sbiw	r24, 0x00	; 0
     236:	69 f0       	breq	.+26     	; 0x252 <DIO_Write+0x54>
     238:	74 c0       	rjmp	.+232    	; 0x322 <DIO_Write+0x124>
     23a:	2d 81       	ldd	r18, Y+5	; 0x05
     23c:	3e 81       	ldd	r19, Y+6	; 0x06
     23e:	22 30       	cpi	r18, 0x02	; 2
     240:	31 05       	cpc	r19, r1
     242:	d9 f1       	breq	.+118    	; 0x2ba <DIO_Write+0xbc>
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	9e 81       	ldd	r25, Y+6	; 0x06
     248:	83 30       	cpi	r24, 0x03	; 3
     24a:	91 05       	cpc	r25, r1
     24c:	09 f4       	brne	.+2      	; 0x250 <DIO_Write+0x52>
     24e:	4f c0       	rjmp	.+158    	; 0x2ee <DIO_Write+0xf0>
     250:	68 c0       	rjmp	.+208    	; 0x322 <DIO_Write+0x124>
	{
	case GPIOA:

		if(value == LOW)
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	88 23       	and	r24, r24
     256:	59 f4       	brne	.+22     	; 0x26e <DIO_Write+0x70>
		{
			PORTA_DATA &= ~(pins);
     258:	ab e3       	ldi	r26, 0x3B	; 59
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	eb e3       	ldi	r30, 0x3B	; 59
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	98 2f       	mov	r25, r24
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	80 95       	com	r24
     268:	89 23       	and	r24, r25
     26a:	8c 93       	st	X, r24
     26c:	0a c0       	rjmp	.+20     	; 0x282 <DIO_Write+0x84>
		}
		else
		{
			PORTA_DATA |= (pins&value);
     26e:	ab e3       	ldi	r26, 0x3B	; 59
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	eb e3       	ldi	r30, 0x3B	; 59
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	20 81       	ld	r18, Z
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	8c 81       	ldd	r24, Y+4	; 0x04
     27c:	89 23       	and	r24, r25
     27e:	82 2b       	or	r24, r18
     280:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     282:	19 82       	std	Y+1, r1	; 0x01
     284:	50 c0       	rjmp	.+160    	; 0x326 <DIO_Write+0x128>
		break;

	case GPIOB:
		if(value == LOW)
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	88 23       	and	r24, r24
     28a:	59 f4       	brne	.+22     	; 0x2a2 <DIO_Write+0xa4>
		{
			PORTB_DATA &= ~(pins);
     28c:	a8 e3       	ldi	r26, 0x38	; 56
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e8 e3       	ldi	r30, 0x38	; 56
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	98 2f       	mov	r25, r24
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	80 95       	com	r24
     29c:	89 23       	and	r24, r25
     29e:	8c 93       	st	X, r24
     2a0:	0a c0       	rjmp	.+20     	; 0x2b6 <DIO_Write+0xb8>
		}
		else
		{
			PORTB_DATA |= (pins&value);
     2a2:	a8 e3       	ldi	r26, 0x38	; 56
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e8 e3       	ldi	r30, 0x38	; 56
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	20 81       	ld	r18, Z
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	8c 81       	ldd	r24, Y+4	; 0x04
     2b0:	89 23       	and	r24, r25
     2b2:	82 2b       	or	r24, r18
     2b4:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     2b6:	19 82       	std	Y+1, r1	; 0x01
     2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_Write+0x128>
		break;
	case GPIOC:
		if(value == LOW)
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	88 23       	and	r24, r24
     2be:	59 f4       	brne	.+22     	; 0x2d6 <DIO_Write+0xd8>
		{
			PORTC_DATA &= ~(pins);
     2c0:	a5 e3       	ldi	r26, 0x35	; 53
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	e5 e3       	ldi	r30, 0x35	; 53
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	98 2f       	mov	r25, r24
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	80 95       	com	r24
     2d0:	89 23       	and	r24, r25
     2d2:	8c 93       	st	X, r24
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <DIO_Write+0xec>
		}
		else
		{
			PORTC_DATA |= (pins&value);
     2d6:	a5 e3       	ldi	r26, 0x35	; 53
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	e5 e3       	ldi	r30, 0x35	; 53
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	20 81       	ld	r18, Z
     2e0:	9b 81       	ldd	r25, Y+3	; 0x03
     2e2:	8c 81       	ldd	r24, Y+4	; 0x04
     2e4:	89 23       	and	r24, r25
     2e6:	82 2b       	or	r24, r18
     2e8:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     2ea:	19 82       	std	Y+1, r1	; 0x01
     2ec:	1c c0       	rjmp	.+56     	; 0x326 <DIO_Write+0x128>
		break;

	case GPIOD:
		if(value == LOW)
     2ee:	8c 81       	ldd	r24, Y+4	; 0x04
     2f0:	88 23       	and	r24, r24
     2f2:	59 f4       	brne	.+22     	; 0x30a <DIO_Write+0x10c>
		{
			PORTD_DATA &= ~(pins);
     2f4:	a2 e3       	ldi	r26, 0x32	; 50
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e2 e3       	ldi	r30, 0x32	; 50
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	98 2f       	mov	r25, r24
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	80 95       	com	r24
     304:	89 23       	and	r24, r25
     306:	8c 93       	st	X, r24
     308:	0a c0       	rjmp	.+20     	; 0x31e <DIO_Write+0x120>
		}
		else
		{
			PORTD_DATA |= (pins&value);
     30a:	a2 e3       	ldi	r26, 0x32	; 50
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e2 e3       	ldi	r30, 0x32	; 50
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	20 81       	ld	r18, Z
     314:	9b 81       	ldd	r25, Y+3	; 0x03
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	89 23       	and	r24, r25
     31a:	82 2b       	or	r24, r18
     31c:	8c 93       	st	X, r24
		}
		u8_error = E_ok;
     31e:	19 82       	std	Y+1, r1	; 0x01
     320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_Write+0x128>
		break;

	default:
		u8_error = E_NOk;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     326:	89 81       	ldd	r24, Y+1	; 0x01
}
     328:	26 96       	adiw	r28, 0x06	; 6
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	08 95       	ret

0000033a <DIO_Read>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can read the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     33a:	df 93       	push	r29
     33c:	cf 93       	push	r28
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	27 97       	sbiw	r28, 0x07	; 7
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	8a 83       	std	Y+2, r24	; 0x02
     350:	6b 83       	std	Y+3, r22	; 0x03
     352:	5d 83       	std	Y+5, r21	; 0x05
     354:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	28 2f       	mov	r18, r24
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	3f 83       	std	Y+7, r19	; 0x07
     35e:	2e 83       	std	Y+6, r18	; 0x06
     360:	8e 81       	ldd	r24, Y+6	; 0x06
     362:	9f 81       	ldd	r25, Y+7	; 0x07
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	91 05       	cpc	r25, r1
     368:	f9 f0       	breq	.+62     	; 0x3a8 <DIO_Read+0x6e>
     36a:	2e 81       	ldd	r18, Y+6	; 0x06
     36c:	3f 81       	ldd	r19, Y+7	; 0x07
     36e:	22 30       	cpi	r18, 0x02	; 2
     370:	31 05       	cpc	r19, r1
     372:	2c f4       	brge	.+10     	; 0x37e <DIO_Read+0x44>
     374:	8e 81       	ldd	r24, Y+6	; 0x06
     376:	9f 81       	ldd	r25, Y+7	; 0x07
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	61 f0       	breq	.+24     	; 0x394 <DIO_Read+0x5a>
     37c:	33 c0       	rjmp	.+102    	; 0x3e4 <DIO_Read+0xaa>
     37e:	2e 81       	ldd	r18, Y+6	; 0x06
     380:	3f 81       	ldd	r19, Y+7	; 0x07
     382:	22 30       	cpi	r18, 0x02	; 2
     384:	31 05       	cpc	r19, r1
     386:	d1 f0       	breq	.+52     	; 0x3bc <DIO_Read+0x82>
     388:	8e 81       	ldd	r24, Y+6	; 0x06
     38a:	9f 81       	ldd	r25, Y+7	; 0x07
     38c:	83 30       	cpi	r24, 0x03	; 3
     38e:	91 05       	cpc	r25, r1
     390:	f9 f0       	breq	.+62     	; 0x3d0 <DIO_Read+0x96>
     392:	28 c0       	rjmp	.+80     	; 0x3e4 <DIO_Read+0xaa>
	{
	case GPIOA:
		*data= (PORTA_PIN & pins);
     394:	e9 e3       	ldi	r30, 0x39	; 57
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	90 81       	ld	r25, Z
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	89 23       	and	r24, r25
     39e:	ec 81       	ldd	r30, Y+4	; 0x04
     3a0:	fd 81       	ldd	r31, Y+5	; 0x05
     3a2:	80 83       	st	Z, r24
		u8_error = E_ok;
     3a4:	19 82       	std	Y+1, r1	; 0x01
     3a6:	20 c0       	rjmp	.+64     	; 0x3e8 <DIO_Read+0xae>
		break;

	case GPIOB:
		*data= (PORTB_PIN & pins);
     3a8:	e6 e3       	ldi	r30, 0x36	; 54
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	90 81       	ld	r25, Z
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	89 23       	and	r24, r25
     3b2:	ec 81       	ldd	r30, Y+4	; 0x04
     3b4:	fd 81       	ldd	r31, Y+5	; 0x05
     3b6:	80 83       	st	Z, r24
		u8_error = E_ok;
     3b8:	19 82       	std	Y+1, r1	; 0x01
     3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <DIO_Read+0xae>
		break;

	case GPIOC:
		*data= (PORTC_PIN & pins);
     3bc:	e3 e3       	ldi	r30, 0x33	; 51
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	90 81       	ld	r25, Z
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	89 23       	and	r24, r25
     3c6:	ec 81       	ldd	r30, Y+4	; 0x04
     3c8:	fd 81       	ldd	r31, Y+5	; 0x05
     3ca:	80 83       	st	Z, r24
		u8_error = E_ok;
     3cc:	19 82       	std	Y+1, r1	; 0x01
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <DIO_Read+0xae>
		break;
	case GPIOD:
		*data= (PORTD_PIN & pins);
     3d0:	e0 e3       	ldi	r30, 0x30	; 48
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	90 81       	ld	r25, Z
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	89 23       	and	r24, r25
     3da:	ec 81       	ldd	r30, Y+4	; 0x04
     3dc:	fd 81       	ldd	r31, Y+5	; 0x05
     3de:	80 83       	st	Z, r24
		u8_error = E_ok;
     3e0:	19 82       	std	Y+1, r1	; 0x01
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_Read+0xae>
		break;
	default:
		u8_error = E_NOk;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(*data!=LOW)
     3e8:	ec 81       	ldd	r30, Y+4	; 0x04
     3ea:	fd 81       	ldd	r31, Y+5	; 0x05
     3ec:	80 81       	ld	r24, Z
     3ee:	88 23       	and	r24, r24
     3f0:	21 f0       	breq	.+8      	; 0x3fa <DIO_Read+0xc0>
	{
		*data=HIGH;
     3f2:	ec 81       	ldd	r30, Y+4	; 0x04
     3f4:	fd 81       	ldd	r31, Y+5	; 0x05
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	80 83       	st	Z, r24
	}
	return u8_error;
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     3fc:	27 96       	adiw	r28, 0x07	; 7
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <DIO_Toggle>:
* Return value: u8_error-> variable that describe the error status
* Description: This function toggles the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     40e:	df 93       	push	r29
     410:	cf 93       	push	r28
     412:	00 d0       	rcall	.+0      	; 0x414 <DIO_Toggle+0x6>
     414:	00 d0       	rcall	.+0      	; 0x416 <DIO_Toggle+0x8>
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	8a 83       	std	Y+2, r24	; 0x02
     41e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_error;
	switch(GPIO)
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	3d 83       	std	Y+5, r19	; 0x05
     428:	2c 83       	std	Y+4, r18	; 0x04
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	9d 81       	ldd	r25, Y+5	; 0x05
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	91 05       	cpc	r25, r1
     432:	f9 f0       	breq	.+62     	; 0x472 <__stack+0x13>
     434:	2c 81       	ldd	r18, Y+4	; 0x04
     436:	3d 81       	ldd	r19, Y+5	; 0x05
     438:	22 30       	cpi	r18, 0x02	; 2
     43a:	31 05       	cpc	r19, r1
     43c:	2c f4       	brge	.+10     	; 0x448 <DIO_Toggle+0x3a>
     43e:	8c 81       	ldd	r24, Y+4	; 0x04
     440:	9d 81       	ldd	r25, Y+5	; 0x05
     442:	00 97       	sbiw	r24, 0x00	; 0
     444:	61 f0       	breq	.+24     	; 0x45e <DIO_Toggle+0x50>
     446:	33 c0       	rjmp	.+102    	; 0x4ae <__stack+0x4f>
     448:	2c 81       	ldd	r18, Y+4	; 0x04
     44a:	3d 81       	ldd	r19, Y+5	; 0x05
     44c:	22 30       	cpi	r18, 0x02	; 2
     44e:	31 05       	cpc	r19, r1
     450:	d1 f0       	breq	.+52     	; 0x486 <__stack+0x27>
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	9d 81       	ldd	r25, Y+5	; 0x05
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	91 05       	cpc	r25, r1
     45a:	f9 f0       	breq	.+62     	; 0x49a <__stack+0x3b>
     45c:	28 c0       	rjmp	.+80     	; 0x4ae <__stack+0x4f>
	{
	case GPIOA:
			PORTA_DATA ^= pins;
     45e:	ab e3       	ldi	r26, 0x3B	; 59
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	eb e3       	ldi	r30, 0x3B	; 59
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	90 81       	ld	r25, Z
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	89 27       	eor	r24, r25
     46c:	8c 93       	st	X, r24
			u8_error = E_ok;
     46e:	19 82       	std	Y+1, r1	; 0x01
     470:	20 c0       	rjmp	.+64     	; 0x4b2 <__stack+0x53>
		break;

	case GPIOB:
			PORTB_DATA ^= (pins);
     472:	a8 e3       	ldi	r26, 0x38	; 56
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	e8 e3       	ldi	r30, 0x38	; 56
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	90 81       	ld	r25, Z
     47c:	8b 81       	ldd	r24, Y+3	; 0x03
     47e:	89 27       	eor	r24, r25
     480:	8c 93       	st	X, r24
			u8_error = E_ok;
     482:	19 82       	std	Y+1, r1	; 0x01
     484:	16 c0       	rjmp	.+44     	; 0x4b2 <__stack+0x53>
		break;
	case GPIOC:
			PORTC_DATA ^= (pins);
     486:	a5 e3       	ldi	r26, 0x35	; 53
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e5 e3       	ldi	r30, 0x35	; 53
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	90 81       	ld	r25, Z
     490:	8b 81       	ldd	r24, Y+3	; 0x03
     492:	89 27       	eor	r24, r25
     494:	8c 93       	st	X, r24
			u8_error = E_ok;
     496:	19 82       	std	Y+1, r1	; 0x01
     498:	0c c0       	rjmp	.+24     	; 0x4b2 <__stack+0x53>
		break;

	case GPIOD:
			PORTD_DATA ^= (pins);
     49a:	a2 e3       	ldi	r26, 0x32	; 50
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	e2 e3       	ldi	r30, 0x32	; 50
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	90 81       	ld	r25, Z
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	89 27       	eor	r24, r25
     4a8:	8c 93       	st	X, r24
			u8_error = E_ok;
     4aa:	19 82       	std	Y+1, r1	; 0x01
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
		break;

	default:
		u8_error = E_NOk;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <TMU_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initiates the module
************************************************************************************/
ERROR_STATUS TMU_Init(TMU_ConfigType* ConfigPtr)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	29 97       	sbiw	r28, 0x09	; 9
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	99 87       	std	Y+9, r25	; 0x09
     4da:	88 87       	std	Y+8, r24	; 0x08
	uint8_t u8_status=E_ok;
     4dc:	19 82       	std	Y+1, r1	; 0x01
	if(ConfigPtr == NULL_PTR || TMU_Status == TMU_INITIALIZED)
     4de:	88 85       	ldd	r24, Y+8	; 0x08
     4e0:	99 85       	ldd	r25, Y+9	; 0x09
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	21 f0       	breq	.+8      	; 0x4ee <TMU_Init+0x2a>
     4e6:	80 91 6e 00 	lds	r24, 0x006E
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <TMU_Init+0x32>
	{
		u8_status |= E_NOk;
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	24 c0       	rjmp	.+72     	; 0x53e <TMU_Init+0x7a>
	}
	else
	{
		TMU_Channels = ConfigPtr->Channels;
     4f6:	88 85       	ldd	r24, Y+8	; 0x08
     4f8:	99 85       	ldd	r25, Y+9	; 0x09
     4fa:	90 93 6d 00 	sts	0x006D, r25
     4fe:	80 93 6c 00 	sts	0x006C, r24
		{
			timer0_stru_init.Timer_CH_NO=Timer_0,
			timer0_stru_init.Timer_Mode=T0_COMP_MODE,
			timer0_stru_init.Timer_Polling_Or_Interrupt=T0_INTERRUPT_CMP,
			timer0_stru_init.Timer_Prescaler=T0_PRESCALER_64,
		};
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	3a 81       	ldd	r19, Y+2	; 0x02
     506:	88 e0       	ldi	r24, 0x08	; 8
     508:	8b 83       	std	Y+3, r24	; 0x03
     50a:	4b 81       	ldd	r20, Y+3	; 0x03
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	8c 83       	std	Y+4, r24	; 0x04
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	8d 83       	std	Y+5, r24	; 0x05
     516:	2d 81       	ldd	r18, Y+5	; 0x05
     518:	86 e0       	ldi	r24, 0x06	; 6
     51a:	fe 01       	movw	r30, r28
     51c:	32 96       	adiw	r30, 0x02	; 2
     51e:	df 01       	movw	r26, r30
     520:	58 2f       	mov	r21, r24
     522:	1d 92       	st	X+, r1
     524:	5a 95       	dec	r21
     526:	e9 f7       	brne	.-6      	; 0x522 <TMU_Init+0x5e>
     528:	3a 83       	std	Y+2, r19	; 0x02
     52a:	4b 83       	std	Y+3, r20	; 0x03
     52c:	9c 83       	std	Y+4, r25	; 0x04
     52e:	2d 83       	std	Y+5, r18	; 0x05
		Timer_Init(&timer0_stru_init);
     530:	ce 01       	movw	r24, r28
     532:	02 96       	adiw	r24, 0x02	; 2
     534:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Timer_Init>
		TMU_Status = TMU_INITIALIZED;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 6e 00 	sts	0x006E, r24
	}

	if(u8_status == E_ok)
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	88 23       	and	r24, r24
     542:	11 f4       	brne	.+4      	; 0x548 <TMU_Init+0x84>
	{
		u8_status = E_ok;
     544:	19 82       	std	Y+1, r1	; 0x01
     546:	02 c0       	rjmp	.+4      	; 0x54c <TMU_Init+0x88>
	}
	else
	{
		u8_status = E_NOk;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
}
     54e:	29 96       	adiw	r28, 0x09	; 9
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <TMU_Start>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description:
************************************************************************************/
ERROR_STATUS TMU_Start(void (*ptr)(void), uint8_t channel_id, uint8_t repetition, uint16_t delay)
{
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	29 97       	sbiw	r28, 0x09	; 9
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
     574:	9b 83       	std	Y+3, r25	; 0x03
     576:	8a 83       	std	Y+2, r24	; 0x02
     578:	6c 83       	std	Y+4, r22	; 0x04
     57a:	4d 83       	std	Y+5, r20	; 0x05
     57c:	3f 83       	std	Y+7, r19	; 0x07
     57e:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t u8_status=E_ok;
     580:	19 82       	std	Y+1, r1	; 0x01
	if(ptr == NULL_PTR ||   /*pointer to function is null*/
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	9b 81       	ldd	r25, Y+3	; 0x03
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	b9 f0       	breq	.+46     	; 0x5b8 <TMU_Start+0x58>
     58a:	80 91 6e 00 	lds	r24, 0x006E
     58e:	88 23       	and	r24, r24
     590:	99 f0       	breq	.+38     	; 0x5b8 <TMU_Start+0x58>
     592:	8c 81       	ldd	r24, Y+4	; 0x04
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	fc 01       	movw	r30, r24
     59a:	e2 58       	subi	r30, 0x82	; 130
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	90 81       	ld	r25, Z
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	98 17       	cp	r25, r24
     5a4:	19 f4       	brne	.+6      	; 0x5ac <TMU_Start+0x4c>
     5a6:	8c 81       	ldd	r24, Y+4	; 0x04
     5a8:	88 23       	and	r24, r24
     5aa:	31 f4       	brne	.+12     	; 0x5b8 <TMU_Start+0x58>
     5ac:	8c 81       	ldd	r24, Y+4	; 0x04
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	18 f4       	brcc	.+6      	; 0x5b8 <TMU_Start+0x58>
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	20 f0       	brcs	.+8      	; 0x5c0 <TMU_Start+0x60>
		((gu8_Active_Channels[channel_id]==channel_id) && (channel_id!=FIRST_CHANNEL)) ||  /*restart a channel*/
		channel_id >= NUMBER_OF_CHANNELS ||  /*the TMU buffer is full*/
		repetition>INFINITE  /*unexpected repetition input*/
	  )
	{
		u8_status |= E_NOk;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	7f c0       	rjmp	.+254    	; 0x6be <TMU_Start+0x15e>
	}

	else
	{
		switch(TMU_Channels[channel_id].Timer_CH_NO)
     5c0:	40 91 6c 00 	lds	r20, 0x006C
     5c4:	50 91 6d 00 	lds	r21, 0x006D
     5c8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ca:	28 2f       	mov	r18, r24
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	c9 01       	movw	r24, r18
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	fa 01       	movw	r30, r20
     5da:	e8 0f       	add	r30, r24
     5dc:	f9 1f       	adc	r31, r25
     5de:	80 81       	ld	r24, Z
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	39 87       	std	Y+9, r19	; 0x09
     5e6:	28 87       	std	Y+8, r18	; 0x08
     5e8:	88 85       	ldd	r24, Y+8	; 0x08
     5ea:	99 85       	ldd	r25, Y+9	; 0x09
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	91 05       	cpc	r25, r1
     5f0:	79 f0       	breq	.+30     	; 0x610 <TMU_Start+0xb0>
     5f2:	28 85       	ldd	r18, Y+8	; 0x08
     5f4:	39 85       	ldd	r19, Y+9	; 0x09
     5f6:	22 30       	cpi	r18, 0x02	; 2
     5f8:	31 05       	cpc	r19, r1
     5fa:	71 f0       	breq	.+28     	; 0x618 <TMU_Start+0xb8>
     5fc:	88 85       	ldd	r24, Y+8	; 0x08
     5fe:	99 85       	ldd	r25, Y+9	; 0x09
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	71 f4       	brne	.+28     	; 0x620 <TMU_Start+0xc0>
		{
			case Timer_0:
				Timer_Start(Timer_0,TIMER0_COMPARE_VALUE);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	6a ef       	ldi	r22, 0xFA	; 250
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	0e 94 62 05 	call	0xac4	; 0xac4 <Timer_Start>
     60e:	0b c0       	rjmp	.+22     	; 0x626 <TMU_Start+0xc6>
				break;
			case Timer_1:

				u8_status |= E_NOk;
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	81 60       	ori	r24, 0x01	; 1
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	07 c0       	rjmp	.+14     	; 0x626 <TMU_Start+0xc6>
				break;
			case Timer_2:

				u8_status |= E_NOk;
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	81 60       	ori	r24, 0x01	; 1
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	03 c0       	rjmp	.+6      	; 0x626 <TMU_Start+0xc6>
				break;
			default:
				u8_status |= E_NOk;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	81 60       	ori	r24, 0x01	; 1
     624:	89 83       	std	Y+1, r24	; 0x01
		}

		g8_functionHoler[channel_id]=ptr;
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	fc 01       	movw	r30, r24
     632:	ea 58       	subi	r30, 0x8A	; 138
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	9b 81       	ldd	r25, Y+3	; 0x03
     63a:	91 83       	std	Z+1, r25	; 0x01
     63c:	80 83       	st	Z, r24
		gu32_Counter_Delay_Arr[channel_id][COUNTER]=CLEAR;
     63e:	8c 81       	ldd	r24, Y+4	; 0x04
     640:	88 2f       	mov	r24, r24
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	fc 01       	movw	r30, r24
     652:	ed 57       	subi	r30, 0x7D	; 125
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	10 82       	st	Z, r1
     658:	11 82       	std	Z+1, r1	; 0x01
     65a:	12 82       	std	Z+2, r1	; 0x02
     65c:	13 82       	std	Z+3, r1	; 0x03
		gu32_Counter_Delay_Arr[channel_id][DELAY]=delay;
     65e:	8c 81       	ldd	r24, Y+4	; 0x04
     660:	68 2f       	mov	r22, r24
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	8e 81       	ldd	r24, Y+6	; 0x06
     666:	9f 81       	ldd	r25, Y+7	; 0x07
     668:	9c 01       	movw	r18, r24
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	cb 01       	movw	r24, r22
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	fc 01       	movw	r30, r24
     680:	ed 57       	subi	r30, 0x7D	; 125
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	20 83       	st	Z, r18
     686:	31 83       	std	Z+1, r19	; 0x01
     688:	42 83       	std	Z+2, r20	; 0x02
     68a:	53 83       	std	Z+3, r21	; 0x03
		TMU_Channels[channel_id].Repetition=repetition;
     68c:	40 91 6c 00 	lds	r20, 0x006C
     690:	50 91 6d 00 	lds	r21, 0x006D
     694:	8c 81       	ldd	r24, Y+4	; 0x04
     696:	28 2f       	mov	r18, r24
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	c9 01       	movw	r24, r18
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	fa 01       	movw	r30, r20
     6a6:	e8 0f       	add	r30, r24
     6a8:	f9 1f       	adc	r31, r25
     6aa:	8d 81       	ldd	r24, Y+5	; 0x05
     6ac:	82 83       	std	Z+2, r24	; 0x02
		gu8_Active_Channels[channel_id]=channel_id;
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	fc 01       	movw	r30, r24
     6b6:	e2 58       	subi	r30, 0x82	; 130
     6b8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ba:	8c 81       	ldd	r24, Y+4	; 0x04
     6bc:	80 83       	st	Z, r24
	}

	if(u8_status == E_ok)
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	88 23       	and	r24, r24
     6c2:	11 f4       	brne	.+4      	; 0x6c8 <TMU_Start+0x168>
	{
		u8_status = E_ok;
     6c4:	19 82       	std	Y+1, r1	; 0x01
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <TMU_Start+0x16c>
	}
	else
	{
		u8_status = E_NOk;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     6ce:	29 96       	adiw	r28, 0x09	; 9
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <TMU_Dispatch>:
* Parameters (out): None
* Return value:
* Description:
************************************************************************************/
void TMU_Dispatch(void)
{
     6e0:	df 93       	push	r29
     6e2:	cf 93       	push	r28
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	if(gu8_Timer0CompFlag==FLAG_HIGH)
     6e8:	80 91 6f 00 	lds	r24, 0x006F
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <TMU_Dispatch+0x12>
     6f0:	d1 c0       	rjmp	.+418    	; 0x894 <TMU_Dispatch+0x1b4>
	{
		gu8_Timer0CompFlag=FLAG_LOW;
     6f2:	10 92 6f 00 	sts	0x006F, r1
		for(Loop_Counter=START;Loop_Counter<NUMBER_OF_CHANNELS;Loop_Counter++)
     6f6:	10 92 82 00 	sts	0x0082, r1
     6fa:	c7 c0       	rjmp	.+398    	; 0x88a <TMU_Dispatch+0x1aa>
		{
			if(gu32_Counter_Delay_Arr[Loop_Counter][COUNTER]==gu32_Counter_Delay_Arr[Loop_Counter][DELAY] && gu32_Counter_Delay_Arr[Loop_Counter][DELAY]!=0)
     6fc:	80 91 82 00 	lds	r24, 0x0082
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	fc 01       	movw	r30, r24
     712:	ed 57       	subi	r30, 0x7D	; 125
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	20 81       	ld	r18, Z
     718:	31 81       	ldd	r19, Z+1	; 0x01
     71a:	42 81       	ldd	r20, Z+2	; 0x02
     71c:	53 81       	ldd	r21, Z+3	; 0x03
     71e:	80 91 82 00 	lds	r24, 0x0082
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	fc 01       	movw	r30, r24
     736:	ed 57       	subi	r30, 0x7D	; 125
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	a2 81       	ldd	r26, Z+2	; 0x02
     740:	b3 81       	ldd	r27, Z+3	; 0x03
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	4a 07       	cpc	r20, r26
     748:	5b 07       	cpc	r21, r27
     74a:	09 f0       	breq	.+2      	; 0x74e <TMU_Dispatch+0x6e>
     74c:	73 c0       	rjmp	.+230    	; 0x834 <TMU_Dispatch+0x154>
     74e:	80 91 82 00 	lds	r24, 0x0082
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	fc 01       	movw	r30, r24
     766:	ed 57       	subi	r30, 0x7D	; 125
     768:	ff 4f       	sbci	r31, 0xFF	; 255
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	a2 81       	ldd	r26, Z+2	; 0x02
     770:	b3 81       	ldd	r27, Z+3	; 0x03
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	a1 05       	cpc	r26, r1
     776:	b1 05       	cpc	r27, r1
     778:	09 f4       	brne	.+2      	; 0x77c <TMU_Dispatch+0x9c>
     77a:	5c c0       	rjmp	.+184    	; 0x834 <TMU_Dispatch+0x154>
			{
				(*g8_functionHoler[Loop_Counter])();
     77c:	80 91 82 00 	lds	r24, 0x0082
     780:	88 2f       	mov	r24, r24
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	fc 01       	movw	r30, r24
     78a:	ea 58       	subi	r30, 0x8A	; 138
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	01 90       	ld	r0, Z+
     790:	f0 81       	ld	r31, Z
     792:	e0 2d       	mov	r30, r0
     794:	09 95       	icall
				if(TMU_Channels[Loop_Counter].Repetition==INFINITE)
     796:	40 91 6c 00 	lds	r20, 0x006C
     79a:	50 91 6d 00 	lds	r21, 0x006D
     79e:	80 91 82 00 	lds	r24, 0x0082
     7a2:	28 2f       	mov	r18, r24
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	c9 01       	movw	r24, r18
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	fa 01       	movw	r30, r20
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	91 f4       	brne	.+36     	; 0x7e0 <TMU_Dispatch+0x100>
				{
					gu32_Counter_Delay_Arr[Loop_Counter][COUNTER]=CLEAR;
     7bc:	80 91 82 00 	lds	r24, 0x0082
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	fc 01       	movw	r30, r24
     7d2:	ed 57       	subi	r30, 0x7D	; 125
     7d4:	ff 4f       	sbci	r31, 0xFF	; 255
     7d6:	10 82       	st	Z, r1
     7d8:	11 82       	std	Z+1, r1	; 0x01
     7da:	12 82       	std	Z+2, r1	; 0x02
     7dc:	13 82       	std	Z+3, r1	; 0x03
     7de:	2a c0       	rjmp	.+84     	; 0x834 <TMU_Dispatch+0x154>
				}
				else
				{
					gu32_Counter_Delay_Arr[Loop_Counter][COUNTER]=gu32_Counter_Delay_Arr[Loop_Counter][DELAY]+ONE;
     7e0:	80 91 82 00 	lds	r24, 0x0082
     7e4:	68 2f       	mov	r22, r24
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 91 82 00 	lds	r24, 0x0082
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	fc 01       	movw	r30, r24
     800:	ed 57       	subi	r30, 0x7D	; 125
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	a2 81       	ldd	r26, Z+2	; 0x02
     80a:	b3 81       	ldd	r27, Z+3	; 0x03
     80c:	9c 01       	movw	r18, r24
     80e:	ad 01       	movw	r20, r26
     810:	2f 5f       	subi	r18, 0xFF	; 255
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	4f 4f       	sbci	r20, 0xFF	; 255
     816:	5f 4f       	sbci	r21, 0xFF	; 255
     818:	cb 01       	movw	r24, r22
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	fc 01       	movw	r30, r24
     828:	ed 57       	subi	r30, 0x7D	; 125
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	20 83       	st	Z, r18
     82e:	31 83       	std	Z+1, r19	; 0x01
     830:	42 83       	std	Z+2, r20	; 0x02
     832:	53 83       	std	Z+3, r21	; 0x03
				}
			}
			gu32_Counter_Delay_Arr[Loop_Counter][COUNTER]++;
     834:	80 91 82 00 	lds	r24, 0x0082
     838:	68 2f       	mov	r22, r24
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	cb 01       	movw	r24, r22
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	fc 01       	movw	r30, r24
     84c:	ed 57       	subi	r30, 0x7D	; 125
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	a2 81       	ldd	r26, Z+2	; 0x02
     856:	b3 81       	ldd	r27, Z+3	; 0x03
     858:	9c 01       	movw	r18, r24
     85a:	ad 01       	movw	r20, r26
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	4f 4f       	sbci	r20, 0xFF	; 255
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	cb 01       	movw	r24, r22
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	fc 01       	movw	r30, r24
     874:	ed 57       	subi	r30, 0x7D	; 125
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	20 83       	st	Z, r18
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	42 83       	std	Z+2, r20	; 0x02
     87e:	53 83       	std	Z+3, r21	; 0x03
void TMU_Dispatch(void)
{
	if(gu8_Timer0CompFlag==FLAG_HIGH)
	{
		gu8_Timer0CompFlag=FLAG_LOW;
		for(Loop_Counter=START;Loop_Counter<NUMBER_OF_CHANNELS;Loop_Counter++)
     880:	80 91 82 00 	lds	r24, 0x0082
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 93 82 00 	sts	0x0082, r24
     88a:	80 91 82 00 	lds	r24, 0x0082
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	08 f4       	brcc	.+2      	; 0x894 <TMU_Dispatch+0x1b4>
     892:	34 cf       	rjmp	.-408    	; 0x6fc <TMU_Dispatch+0x1c>
				}
			}
			gu32_Counter_Delay_Arr[Loop_Counter][COUNTER]++;
		}
	}
}
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	08 95       	ret

0000089a <TMU_DeInit>:
* Parameters (out): None
* Return value:
* Description:
************************************************************************************/
ERROR_STATUS TMU_DeInit(void)
{
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <TMU_DeInit+0x6>
     8a0:	0f 92       	push	r0
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status=E_ok;
     8a6:	1b 82       	std	Y+3, r1	; 0x03
	if(TMU_Status == TMU_NOT_INITIALIZED)
     8a8:	80 91 6e 00 	lds	r24, 0x006E
     8ac:	88 23       	and	r24, r24
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <TMU_DeInit+0x1e>
	{
		u8_status |= E_NOk;
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	81 60       	ori	r24, 0x01	; 1
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	15 c0       	rjmp	.+42     	; 0x8e2 <TMU_DeInit+0x48>
	}
	else
	{
		Timer_DeInit(Timer_0);
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Timer_DeInit>
		TMU_Status = TMU_NOT_INITIALIZED;
     8be:	10 92 6e 00 	sts	0x006E, r1

		for(int i=0;i<NUMBER_OF_CHANNELS;i++)
     8c2:	1a 82       	std	Y+2, r1	; 0x02
     8c4:	19 82       	std	Y+1, r1	; 0x01
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <TMU_DeInit+0x3e>
		{
			TMU_Stop(i);
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	0e 94 7f 04 	call	0x8fe	; 0x8fe <TMU_Stop>
	else
	{
		Timer_DeInit(Timer_0);
		TMU_Status = TMU_NOT_INITIALIZED;

		for(int i=0;i<NUMBER_OF_CHANNELS;i++)
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	91 05       	cpc	r25, r1
     8e0:	9c f3       	brlt	.-26     	; 0x8c8 <TMU_DeInit+0x2e>
		{
			TMU_Stop(i);
		}
	}

	if(u8_status == E_ok)
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	88 23       	and	r24, r24
     8e6:	11 f4       	brne	.+4      	; 0x8ec <TMU_DeInit+0x52>
	{
		u8_status = E_ok;
     8e8:	1b 82       	std	Y+3, r1	; 0x03
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <TMU_DeInit+0x56>
	}

	else
	{
		u8_status = E_NOk;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8_status;
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	cf 91       	pop	r28
     8fa:	df 91       	pop	r29
     8fc:	08 95       	ret

000008fe <TMU_Stop>:
* Parameters (out): None
* Return value:
* Description:
************************************************************************************/
ERROR_STATUS TMU_Stop(uint8_t Channel_ID)
{
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	00 d0       	rcall	.+0      	; 0x904 <TMU_Stop+0x6>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status=E_ok;
     90a:	19 82       	std	Y+1, r1	; 0x01

	/* check if the channel has been started or not
	 * no need to check if the channel is initialized or not since no channel
	 * will start without initializing the module
	 *  */
	if(gu8_Active_Channels[Channel_ID]!=Channel_ID)
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	e2 58       	subi	r30, 0x82	; 130
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	90 81       	ld	r25, Z
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	98 17       	cp	r25, r24
     91e:	21 f0       	breq	.+8      	; 0x928 <TMU_Stop+0x2a>
	{
		u8_status |= E_NOk;
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	81 60       	ori	r24, 0x01	; 1
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	42 c0       	rjmp	.+132    	; 0x9ac <TMU_Stop+0xae>
	}
	else
	{
		g8_functionHoler[Channel_ID]=NULL_PTR;
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	fc 01       	movw	r30, r24
     934:	ea 58       	subi	r30, 0x8A	; 138
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	11 82       	std	Z+1, r1	; 0x01
     93a:	10 82       	st	Z, r1
		gu32_Counter_Delay_Arr[Channel_ID][COUNTER]=CLEAR;
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	fc 01       	movw	r30, r24
     950:	ed 57       	subi	r30, 0x7D	; 125
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	10 82       	st	Z, r1
     956:	11 82       	std	Z+1, r1	; 0x01
     958:	12 82       	std	Z+2, r1	; 0x02
     95a:	13 82       	std	Z+3, r1	; 0x03
		gu32_Counter_Delay_Arr[Channel_ID][DELAY]=CLEAR;
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	fc 01       	movw	r30, r24
     972:	ed 57       	subi	r30, 0x7D	; 125
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	10 82       	st	Z, r1
     978:	11 82       	std	Z+1, r1	; 0x01
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	13 82       	std	Z+3, r1	; 0x03
		TMU_Channels[Channel_ID].Repetition=ONE_SHOOT;
     97e:	40 91 6c 00 	lds	r20, 0x006C
     982:	50 91 6d 00 	lds	r21, 0x006D
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	c9 01       	movw	r24, r18
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	fa 01       	movw	r30, r20
     998:	e8 0f       	add	r30, r24
     99a:	f9 1f       	adc	r31, r25
     99c:	12 82       	std	Z+2, r1	; 0x02
		gu8_Active_Channels[Channel_ID]=CLEAR;
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	e2 58       	subi	r30, 0x82	; 130
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	10 82       	st	Z, r1
	}

	if(u8_status == E_ok)
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	88 23       	and	r24, r24
     9b0:	11 f4       	brne	.+4      	; 0x9b6 <TMU_Stop+0xb8>
	{
		u8_status = E_ok;
     9b2:	19 82       	std	Y+1, r1	; 0x01
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <TMU_Stop+0xbc>
	}

	else
	{
		u8_status = E_NOk;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <Timer_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initiates the module
************************************************************************************/
ERROR_STATUS Timer_Init(St_TimerCfg* Timer_cfg)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <Timer_Init+0x6>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <Timer_Init+0x8>
     9ce:	0f 92       	push	r0
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	if(Timer_cfg == NULL_Ptr)
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	19 f4       	brne	.+6      	; 0x9e6 <Timer_Init+0x20>
	{
		u8_status=E_NOk;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	66 c0       	rjmp	.+204    	; 0xab2 <Timer_Init+0xec>
	}
	else
	{
		TIMSK = Timer_cfg->Timer_Polling_Or_Interrupt;
     9e6:	a9 e5       	ldi	r26, 0x59	; 89
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	ea 81       	ldd	r30, Y+2	; 0x02
     9ec:	fb 81       	ldd	r31, Y+3	; 0x03
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	8c 93       	st	X, r24
		switch(Timer_cfg->Timer_CH_NO)
     9f2:	ea 81       	ldd	r30, Y+2	; 0x02
     9f4:	fb 81       	ldd	r31, Y+3	; 0x03
     9f6:	80 81       	ld	r24, Z
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	3d 83       	std	Y+5, r19	; 0x05
     9fe:	2c 83       	std	Y+4, r18	; 0x04
     a00:	8c 81       	ldd	r24, Y+4	; 0x04
     a02:	9d 81       	ldd	r25, Y+5	; 0x05
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	91 05       	cpc	r25, r1
     a08:	11 f1       	breq	.+68     	; 0xa4e <Timer_Init+0x88>
     a0a:	2c 81       	ldd	r18, Y+4	; 0x04
     a0c:	3d 81       	ldd	r19, Y+5	; 0x05
     a0e:	22 30       	cpi	r18, 0x02	; 2
     a10:	31 05       	cpc	r19, r1
     a12:	a9 f1       	breq	.+106    	; 0xa7e <Timer_Init+0xb8>
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
     a16:	9d 81       	ldd	r25, Y+5	; 0x05
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	09 f0       	breq	.+2      	; 0xa1e <Timer_Init+0x58>
     a1c:	48 c0       	rjmp	.+144    	; 0xaae <Timer_Init+0xe8>
		{
			case Timer_0:
				TCCR0 = Timer_cfg->Timer_Mode | (ONE<<FOC0);
     a1e:	a3 e5       	ldi	r26, 0x53	; 83
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	ea 81       	ldd	r30, Y+2	; 0x02
     a24:	fb 81       	ldd	r31, Y+3	; 0x03
     a26:	81 81       	ldd	r24, Z+1	; 0x01
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	8c 93       	st	X, r24
				T0_PrescallerValue=Timer_cfg->Timer_Prescaler;
     a2c:	ea 81       	ldd	r30, Y+2	; 0x02
     a2e:	fb 81       	ldd	r31, Y+3	; 0x03
     a30:	83 81       	ldd	r24, Z+3	; 0x03
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 71 00 	sts	0x0071, r25
     a3a:	80 93 70 00 	sts	0x0070, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
     a3e:	a9 e5       	ldi	r26, 0x59	; 89
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	ea 81       	ldd	r30, Y+2	; 0x02
     a44:	fb 81       	ldd	r31, Y+3	; 0x03
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	8c 93       	st	X, r24
				u8_status=E_ok;
     a4a:	19 82       	std	Y+1, r1	; 0x01
     a4c:	32 c0       	rjmp	.+100    	; 0xab2 <Timer_Init+0xec>
				break;
			case Timer_1:
				TCCR1A =Timer_cfg->Timer_Mode | (ONE<<FOC1A) | (ONE<<FOC1B);
     a4e:	af e4       	ldi	r26, 0x4F	; 79
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ea 81       	ldd	r30, Y+2	; 0x02
     a54:	fb 81       	ldd	r31, Y+3	; 0x03
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	8c 60       	ori	r24, 0x0C	; 12
     a5a:	8c 93       	st	X, r24
				T1_PrescallerValue=Timer_cfg->Timer_Prescaler;
     a5c:	ea 81       	ldd	r30, Y+2	; 0x02
     a5e:	fb 81       	ldd	r31, Y+3	; 0x03
     a60:	83 81       	ldd	r24, Z+3	; 0x03
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 73 00 	sts	0x0073, r25
     a6a:	80 93 72 00 	sts	0x0072, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
     a6e:	a9 e5       	ldi	r26, 0x59	; 89
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ea 81       	ldd	r30, Y+2	; 0x02
     a74:	fb 81       	ldd	r31, Y+3	; 0x03
     a76:	82 81       	ldd	r24, Z+2	; 0x02
     a78:	8c 93       	st	X, r24
				u8_status=E_ok;
     a7a:	19 82       	std	Y+1, r1	; 0x01
     a7c:	1a c0       	rjmp	.+52     	; 0xab2 <Timer_Init+0xec>
				break;
			case Timer_2:
				TCCR2 =Timer_cfg->Timer_Mode | (ONE<<FOC0);
     a7e:	a5 e4       	ldi	r26, 0x45	; 69
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	ea 81       	ldd	r30, Y+2	; 0x02
     a84:	fb 81       	ldd	r31, Y+3	; 0x03
     a86:	81 81       	ldd	r24, Z+1	; 0x01
     a88:	80 68       	ori	r24, 0x80	; 128
     a8a:	8c 93       	st	X, r24
				T2_PrescallerValue=Timer_cfg->Timer_Prescaler;
     a8c:	ea 81       	ldd	r30, Y+2	; 0x02
     a8e:	fb 81       	ldd	r31, Y+3	; 0x03
     a90:	83 81       	ldd	r24, Z+3	; 0x03
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	90 93 75 00 	sts	0x0075, r25
     a9a:	80 93 74 00 	sts	0x0074, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
     a9e:	a9 e5       	ldi	r26, 0x59	; 89
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	ea 81       	ldd	r30, Y+2	; 0x02
     aa4:	fb 81       	ldd	r31, Y+3	; 0x03
     aa6:	82 81       	ldd	r24, Z+2	; 0x02
     aa8:	8c 93       	st	X, r24
				u8_status=E_ok;
     aaa:	19 82       	std	Y+1, r1	; 0x01
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <Timer_Init+0xec>
				break;
			default:
				u8_status=E_NOk;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	08 95       	ret

00000ac4 <Timer_Start>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function starts the needed timer
************************************************************************************/
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	00 d0       	rcall	.+0      	; 0xaca <Timer_Start+0x6>
     aca:	00 d0       	rcall	.+0      	; 0xacc <Timer_Start+0x8>
     acc:	00 d0       	rcall	.+0      	; 0xace <Timer_Start+0xa>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	8a 83       	std	Y+2, r24	; 0x02
     ad4:	7c 83       	std	Y+4, r23	; 0x04
     ad6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	3e 83       	std	Y+6, r19	; 0x06
     ae0:	2d 83       	std	Y+5, r18	; 0x05
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	9e 81       	ldd	r25, Y+6	; 0x06
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	91 05       	cpc	r25, r1
     aea:	21 f1       	breq	.+72     	; 0xb34 <Timer_Start+0x70>
     aec:	2d 81       	ldd	r18, Y+5	; 0x05
     aee:	3e 81       	ldd	r19, Y+6	; 0x06
     af0:	22 30       	cpi	r18, 0x02	; 2
     af2:	31 05       	cpc	r19, r1
     af4:	a1 f1       	breq	.+104    	; 0xb5e <Timer_Start+0x9a>
     af6:	8d 81       	ldd	r24, Y+5	; 0x05
     af8:	9e 81       	ldd	r25, Y+6	; 0x06
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <Timer_Start+0x3c>
     afe:	49 c0       	rjmp	.+146    	; 0xb92 <Timer_Start+0xce>
	{
		case Timer_0:
			if(Timer_Count<=TIMER0_MAX_COUNT)
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	92 07       	cpc	r25, r18
     b0a:	88 f4       	brcc	.+34     	; 0xb2e <Timer_Start+0x6a>
			{
				OCR0 = Timer_Count;
     b0c:	ec e5       	ldi	r30, 0x5C	; 92
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	80 83       	st	Z, r24
				TCCR0 |= T0_PrescallerValue;
     b14:	a3 e5       	ldi	r26, 0x53	; 83
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e3 e5       	ldi	r30, 0x53	; 83
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 81       	ld	r18, Z
     b1e:	80 91 70 00 	lds	r24, 0x0070
     b22:	90 91 71 00 	lds	r25, 0x0071
     b26:	82 2b       	or	r24, r18
     b28:	8c 93       	st	X, r24
				u8_status=E_ok;
     b2a:	19 82       	std	Y+1, r1	; 0x01
     b2c:	34 c0       	rjmp	.+104    	; 0xb96 <Timer_Start+0xd2>
			}
			else
			{
				u8_status=E_NOk;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	31 c0       	rjmp	.+98     	; 0xb96 <Timer_Start+0xd2>
			break;

		case Timer_1:
			if(Timer_Count<=TIMER1_MAX_COUNT)
			{
				OCR1A = Timer_Count;
     b34:	ea e4       	ldi	r30, 0x4A	; 74
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	80 83       	st	Z, r24
				OCR1B = Timer_Count;
     b40:	e8 e4       	ldi	r30, 0x48	; 72
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	80 83       	st	Z, r24
				TCCR1B = T1_PrescallerValue;
     b4c:	ee e4       	ldi	r30, 0x4E	; 78
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 91 72 00 	lds	r24, 0x0072
     b54:	90 91 73 00 	lds	r25, 0x0073
     b58:	80 83       	st	Z, r24
				u8_status=E_ok;
     b5a:	19 82       	std	Y+1, r1	; 0x01
     b5c:	1c c0       	rjmp	.+56     	; 0xb96 <Timer_Start+0xd2>
				u8_status=E_NOk;
			}
			break;

		case Timer_2:
			if(Timer_Count<=TIMER0_MAX_COUNT)
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	31 e0       	ldi	r19, 0x01	; 1
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	93 07       	cpc	r25, r19
     b68:	88 f4       	brcc	.+34     	; 0xb8c <Timer_Start+0xc8>
			{
				OCR2 = Timer_Count;
     b6a:	e3 e4       	ldi	r30, 0x43	; 67
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	80 83       	st	Z, r24
				TCCR2 |= T2_PrescallerValue;
     b72:	a5 e4       	ldi	r26, 0x45	; 69
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e5 e4       	ldi	r30, 0x45	; 69
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	20 81       	ld	r18, Z
     b7c:	80 91 74 00 	lds	r24, 0x0074
     b80:	90 91 75 00 	lds	r25, 0x0075
     b84:	82 2b       	or	r24, r18
     b86:	8c 93       	st	X, r24
				u8_status=E_ok;
     b88:	19 82       	std	Y+1, r1	; 0x01
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <Timer_Start+0xd2>
			}
			else
			{
				u8_status=E_NOk;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <Timer_Start+0xd2>
			}

			break;

		default:
			u8_status=E_NOk;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
}
     b98:	26 96       	adiw	r28, 0x06	; 6
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <Timer_Stop>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function stops the needed timer
************************************************************************************/
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <Timer_Stop+0x6>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <Timer_Stop+0x8>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3c 83       	std	Y+4, r19	; 0x04
     bc0:	2b 83       	std	Y+3, r18	; 0x03
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	71 f0       	breq	.+28     	; 0xbe8 <Timer_Stop+0x3e>
     bcc:	2b 81       	ldd	r18, Y+3	; 0x03
     bce:	3c 81       	ldd	r19, Y+4	; 0x04
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	79 f0       	breq	.+30     	; 0xbf4 <Timer_Stop+0x4a>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	81 f4       	brne	.+32     	; 0xbfe <Timer_Stop+0x54>
	{
		case Timer_0:
			TCCR0 = T0_NO_CLOCK;
     bde:	e3 e5       	ldi	r30, 0x53	; 83
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	10 82       	st	Z, r1
			u8_status=E_ok;
     be4:	19 82       	std	Y+1, r1	; 0x01
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <Timer_Stop+0x58>
			break;
		case Timer_1:
			TCCR1 = T1_NO_CLOCK;
     be8:	ee e4       	ldi	r30, 0x4E	; 78
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	11 82       	std	Z+1, r1	; 0x01
     bee:	10 82       	st	Z, r1
			u8_status=E_ok;
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <Timer_Stop+0x58>
			break;
		case Timer_2:
			TCCR2 = T2_NO_CLOCK;
     bf4:	e5 e4       	ldi	r30, 0x45	; 69
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	10 82       	st	Z, r1
			u8_status=E_ok;
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <Timer_Stop+0x58>
			break;
		default:
			u8_status=E_NOk;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <Timer_GetStatus>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return if the flag of the timer is raised or not
************************************************************************************/
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, bool_t* Data)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer_GetStatus+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <Timer_GetStatus+0x8>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <Timer_GetStatus+0xa>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	3e 83       	std	Y+6, r19	; 0x06
     c2e:	2d 83       	std	Y+5, r18	; 0x05
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	91 05       	cpc	r25, r1
     c38:	e1 f0       	breq	.+56     	; 0xc72 <Timer_GetStatus+0x60>
     c3a:	2d 81       	ldd	r18, Y+5	; 0x05
     c3c:	3e 81       	ldd	r19, Y+6	; 0x06
     c3e:	22 30       	cpi	r18, 0x02	; 2
     c40:	31 05       	cpc	r19, r1
     c42:	51 f1       	breq	.+84     	; 0xc98 <Timer_GetStatus+0x86>
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	c9 f5       	brne	.+114    	; 0xcbe <Timer_GetStatus+0xac>
	{
		case Timer_0:
			if(TIFR & (ONE<<TOV0))
     c4c:	e8 e5       	ldi	r30, 0x58	; 88
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	81 70       	andi	r24, 0x01	; 1
     c58:	90 70       	andi	r25, 0x00	; 0
     c5a:	88 23       	and	r24, r24
     c5c:	29 f0       	breq	.+10     	; 0xc68 <Timer_GetStatus+0x56>
			{
				*Data=FLAG_RAISED;
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	80 83       	st	Z, r24
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <Timer_GetStatus+0x5c>
			}
			else
			{
				*Data=FLAG_DOWN;
     c68:	eb 81       	ldd	r30, Y+3	; 0x03
     c6a:	fc 81       	ldd	r31, Y+4	; 0x04
     c6c:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
     c6e:	19 82       	std	Y+1, r1	; 0x01
     c70:	28 c0       	rjmp	.+80     	; 0xcc2 <Timer_GetStatus+0xb0>
			break;

		case Timer_1:
			if(TIFR & (ONE<<TOV1))
     c72:	e8 e5       	ldi	r30, 0x58	; 88
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	84 70       	andi	r24, 0x04	; 4
     c7e:	90 70       	andi	r25, 0x00	; 0
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	29 f0       	breq	.+10     	; 0xc8e <Timer_GetStatus+0x7c>
			{
				*Data=FLAG_RAISED;
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 83       	st	Z, r24
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <Timer_GetStatus+0x82>
			}
			else
			{
				*Data=FLAG_DOWN;
     c8e:	eb 81       	ldd	r30, Y+3	; 0x03
     c90:	fc 81       	ldd	r31, Y+4	; 0x04
     c92:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
     c94:	19 82       	std	Y+1, r1	; 0x01
     c96:	15 c0       	rjmp	.+42     	; 0xcc2 <Timer_GetStatus+0xb0>
			break;

		case Timer_2:
			if(TIFR & (ONE<<TOV2))
     c98:	e8 e5       	ldi	r30, 0x58	; 88
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	80 74       	andi	r24, 0x40	; 64
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <Timer_GetStatus+0xa2>
			{
				*Data=FLAG_RAISED;
     caa:	eb 81       	ldd	r30, Y+3	; 0x03
     cac:	fc 81       	ldd	r31, Y+4	; 0x04
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 83       	st	Z, r24
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <Timer_GetStatus+0xa8>
			}
			else
			{
				*Data=FLAG_DOWN;
     cb4:	eb 81       	ldd	r30, Y+3	; 0x03
     cb6:	fc 81       	ldd	r31, Y+4	; 0x04
     cb8:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
     cba:	19 82       	std	Y+1, r1	; 0x01
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <Timer_GetStatus+0xb0>
			break;

		default:
			u8_status=E_NOk;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	26 96       	adiw	r28, 0x06	; 6
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <Timer_GetValue>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return the value of the timer
************************************************************************************/
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,uint16_t* Data)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <Timer_GetValue+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <Timer_GetValue+0x8>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <Timer_GetValue+0xa>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3e 83       	std	Y+6, r19	; 0x06
     cf2:	2d 83       	std	Y+5, r18	; 0x05
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	a1 f0       	breq	.+40     	; 0xd26 <Timer_GetValue+0x50>
     cfe:	2d 81       	ldd	r18, Y+5	; 0x05
     d00:	3e 81       	ldd	r19, Y+6	; 0x06
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	c9 f0       	breq	.+50     	; 0xd3a <Timer_GetValue+0x64>
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	01 f5       	brne	.+64     	; 0xd50 <Timer_GetValue+0x7a>
	{
		case Timer_0:
			*Data = TCNT0;
     d10:	e2 e5       	ldi	r30, 0x52	; 82
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	eb 81       	ldd	r30, Y+3	; 0x03
     d1c:	fc 81       	ldd	r31, Y+4	; 0x04
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
			u8_status=E_ok;
     d22:	19 82       	std	Y+1, r1	; 0x01
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <Timer_GetValue+0x7e>
			break;
		case Timer_1:
			*Data = TCNT1;
     d26:	ec e4       	ldi	r30, 0x4C	; 76
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	eb 81       	ldd	r30, Y+3	; 0x03
     d30:	fc 81       	ldd	r31, Y+4	; 0x04
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
			u8_status=E_ok;
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <Timer_GetValue+0x7e>
			break;
		case Timer_2:
			*Data = TCNT2;
     d3a:	e4 e4       	ldi	r30, 0x44	; 68
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	eb 81       	ldd	r30, Y+3	; 0x03
     d46:	fc 81       	ldd	r31, Y+4	; 0x04
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
			u8_status=E_ok;
     d4c:	19 82       	std	Y+1, r1	; 0x01
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <Timer_GetValue+0x7e>
			break;
		default:
			u8_status=E_NOk;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
}
     d56:	26 96       	adiw	r28, 0x06	; 6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <Timer_Clear>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function is used to reset the TCNTX register value
************************************************************************************/
ERROR_STATUS Timer_Clear(uint8_t Timer_CH_NO)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <Timer_Clear+0x6>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <Timer_Clear+0x8>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	3c 83       	std	Y+4, r19	; 0x04
     d7e:	2b 83       	std	Y+3, r18	; 0x03
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	71 f0       	breq	.+28     	; 0xda6 <Timer_Clear+0x3e>
     d8a:	2b 81       	ldd	r18, Y+3	; 0x03
     d8c:	3c 81       	ldd	r19, Y+4	; 0x04
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	79 f0       	breq	.+30     	; 0xdb2 <Timer_Clear+0x4a>
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	81 f4       	brne	.+32     	; 0xdbc <Timer_Clear+0x54>
	{
		case Timer_0:
			TCNT0= CLEAR;
     d9c:	e2 e5       	ldi	r30, 0x52	; 82
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	10 82       	st	Z, r1
			u8_status=E_ok;
     da2:	19 82       	std	Y+1, r1	; 0x01
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <Timer_Clear+0x58>
			break;
		case Timer_1:
			TCNT1 = CLEAR;
     da6:	ec e4       	ldi	r30, 0x4C	; 76
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
			u8_status=E_ok;
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <Timer_Clear+0x58>
			break;
		case Timer_2:
			TCNT2 = CLEAR;
     db2:	e4 e4       	ldi	r30, 0x44	; 68
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
			u8_status=E_ok;
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <Timer_Clear+0x58>
			break;
		default:
			u8_status=E_NOk;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <Timer_DeInit>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function is used to de-initialize TIMERX
************************************************************************************/
ERROR_STATUS Timer_DeInit(uint8_t Timer_CH_NO)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <Timer_DeInit+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Timer_DeInit+0x8>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3c 83       	std	Y+4, r19	; 0x04
     de6:	2b 83       	std	Y+3, r18	; 0x03
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	c1 f0       	breq	.+48     	; 0xe22 <Timer_DeInit+0x52>
     df2:	2b 81       	ldd	r18, Y+3	; 0x03
     df4:	3c 81       	ldd	r19, Y+4	; 0x04
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	21 f1       	breq	.+72     	; 0xe44 <Timer_DeInit+0x74>
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	79 f5       	brne	.+94     	; 0xe62 <Timer_DeInit+0x92>
	{
		case Timer_0:
			TCNT0 = CLEAR;
     e04:	e2 e5       	ldi	r30, 0x52	; 82
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
     e0a:	a9 e5       	ldi	r26, 0x59	; 89
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e9 e5       	ldi	r30, 0x59	; 89
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8c 7f       	andi	r24, 0xFC	; 252
     e16:	8c 93       	st	X, r24
			TCCR0 = CLEAR;
     e18:	e3 e5       	ldi	r30, 0x53	; 83
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	10 82       	st	Z, r1
			u8_status=E_ok;
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	22 c0       	rjmp	.+68     	; 0xe66 <Timer_DeInit+0x96>
			break;
		case Timer_1:
			TCNT1 = CLEAR;
     e22:	ec e4       	ldi	r30, 0x4C	; 76
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	11 82       	std	Z+1, r1	; 0x01
     e28:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1B) & ~(1<<OCIE1A) & ~(1<<TICIE1);
     e2a:	a9 e5       	ldi	r26, 0x59	; 89
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e9 e5       	ldi	r30, 0x59	; 89
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	83 7c       	andi	r24, 0xC3	; 195
     e36:	8c 93       	st	X, r24
			TCCR1 = CLEAR;
     e38:	ee e4       	ldi	r30, 0x4E	; 78
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	11 82       	std	Z+1, r1	; 0x01
     e3e:	10 82       	st	Z, r1
			u8_status=E_ok;
     e40:	19 82       	std	Y+1, r1	; 0x01
     e42:	11 c0       	rjmp	.+34     	; 0xe66 <Timer_DeInit+0x96>
			break;
		case Timer_2:
			TCNT2 = CLEAR;
     e44:	e4 e4       	ldi	r30, 0x44	; 68
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
     e4a:	a9 e5       	ldi	r26, 0x59	; 89
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e9 e5       	ldi	r30, 0x59	; 89
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 73       	andi	r24, 0x3F	; 63
     e56:	8c 93       	st	X, r24
			TCCR2 = CLEAR;
     e58:	e5 e4       	ldi	r30, 0x45	; 69
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1
			u8_status=E_ok;
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <Timer_DeInit+0x96>
			break;
		default:
			u8_status=E_NOk;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <__vector_10>:

/**************************************************************************************
                                 TIMERS ISRs
**************************************************************************************/
ISR(TIMER0_COMP_vect)
{
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	8f 93       	push	r24
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	gu8_Timer0CompFlag=1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 6f 00 	sts	0x006F, r24
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <func0>:
#include "TMU.h"
#include "DIO.h"


void func0()
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <func0+0x6>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOA,
			DIO_stru_init.pins=BIT0,
			DIO_stru_init.dir=OUTPUT,
	};
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	29 81       	ldd	r18, Y+1	; 0x01
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8a 83       	std	Y+2, r24	; 0x02
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	8b 83       	std	Y+3, r24	; 0x03
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	29 83       	std	Y+1, r18	; 0x01
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init (&DIO_stru_init);
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

	DIO_Toggle(GPIOA, BIT0);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_Toggle>
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <func1>:

void func1()
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <func1+0x6>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOA,
			DIO_stru_init.pins=BIT1,
			DIO_stru_init.dir=OUTPUT,
	};
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	29 81       	ldd	r18, Y+1	; 0x01
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	8b 83       	std	Y+3, r24	; 0x03
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	29 83       	std	Y+1, r18	; 0x01
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init (&DIO_stru_init);
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

	DIO_Toggle (GPIOA, BIT1);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_Toggle>
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <func2>:

void func2()
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <func2+0x6>
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOA,
			DIO_stru_init.pins=BIT2,
			DIO_stru_init.dir=OUTPUT,
	};
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	29 81       	ldd	r18, Y+1	; 0x01
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	8a 83       	std	Y+2, r24	; 0x02
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	8b 83       	std	Y+3, r24	; 0x03
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	29 83       	std	Y+1, r18	; 0x01
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init (&DIO_stru_init);
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

	DIO_Toggle (GPIOA, BIT2);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	64 e0       	ldi	r22, 0x04	; 4
     f4a:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_Toggle>
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <func3>:

void func3()
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <func3+0x6>
     f60:	0f 92       	push	r0
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOA,
			DIO_stru_init.pins=BIT3,
			DIO_stru_init.dir=OUTPUT,
	};
     f66:	19 82       	std	Y+1, r1	; 0x01
     f68:	29 81       	ldd	r18, Y+1	; 0x01
     f6a:	88 e0       	ldi	r24, 0x08	; 8
     f6c:	8a 83       	std	Y+2, r24	; 0x02
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	29 83       	std	Y+1, r18	; 0x01
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init (&DIO_stru_init);
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

	DIO_Toggle (GPIOA, BIT3);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	68 e0       	ldi	r22, 0x08	; 8
     f88:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_Toggle>
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <func4>:

void func4()
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <func4+0x6>
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOA,
			DIO_stru_init.pins=BIT4,
			DIO_stru_init.dir=OUTPUT,
	};
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	29 81       	ldd	r18, Y+1	; 0x01
     fa8:	80 e1       	ldi	r24, 0x10	; 16
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	29 83       	std	Y+1, r18	; 0x01
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init (&DIO_stru_init);
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

	DIO_Toggle (GPIOA, BIT4);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	60 e1       	ldi	r22, 0x10	; 16
     fc6:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_Toggle>
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <main>:

int main(void)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	sei();
     fde:	78 94       	sei
	TMU_Init(&TMU_Configuration);
     fe0:	80 e6       	ldi	r24, 0x60	; 96
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <TMU_Init>
	TMU_Start(func0,0,1,1000);
     fe8:	80 e5       	ldi	r24, 0x50	; 80
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	28 ee       	ldi	r18, 0xE8	; 232
     ff2:	33 e0       	ldi	r19, 0x03	; 3
     ff4:	0e 94 b0 02 	call	0x560	; 0x560 <TMU_Start>
	TMU_Start(func1,1,1,500);
     ff8:	8f e6       	ldi	r24, 0x6F	; 111
     ffa:	97 e0       	ldi	r25, 0x07	; 7
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	24 ef       	ldi	r18, 0xF4	; 244
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	0e 94 b0 02 	call	0x560	; 0x560 <TMU_Start>
	TMU_DeInit();
    1008:	0e 94 4d 04 	call	0x89a	; 0x89a <TMU_DeInit>
	TMU_Start(func2,2,0,1000);
    100c:	8e e8       	ldi	r24, 0x8E	; 142
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	28 ee       	ldi	r18, 0xE8	; 232
    1016:	33 e0       	ldi	r19, 0x03	; 3
    1018:	0e 94 b0 02 	call	0x560	; 0x560 <TMU_Start>
	TMU_Stop(1);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <TMU_Stop>
	TMU_Start(func3,3,1,1000);
    1022:	8d ea       	ldi	r24, 0xAD	; 173
    1024:	97 e0       	ldi	r25, 0x07	; 7
    1026:	63 e0       	ldi	r22, 0x03	; 3
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	28 ee       	ldi	r18, 0xE8	; 232
    102c:	33 e0       	ldi	r19, 0x03	; 3
    102e:	0e 94 b0 02 	call	0x560	; 0x560 <TMU_Start>
	while(1)
	{
		TMU_Dispatch();
    1032:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TMU_Dispatch>
    1036:	fd cf       	rjmp	.-6      	; 0x1032 <main+0x5c>

00001038 <_exit>:
    1038:	f8 94       	cli

0000103a <__stop_program>:
    103a:	ff cf       	rjmp	.-2      	; 0x103a <__stop_program>
